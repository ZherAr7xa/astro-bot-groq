import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from groq import Groq
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())
groq_client = Groq(api_key=os.getenv("GROQ_API_KEY"))

class UserState(StatesGroup):
    birth_data = State()
    question = State()

SAMPLE_NATAL = "–°–æ–ª–Ω—Ü–µ –≤ –î–µ–≤–µ, –õ—É–Ω–∞ –≤ –†–∞–∫–µ, –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –≤ –°–∫–æ—Ä–ø–∏–æ–Ω–µ, –ú–∞—Ä—Å –≤ 10-–º –¥–æ–º–µ –≤ –ö–æ–∑–µ—Ä–æ–≥–µ"

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∑–≤—ë–∑–¥.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—â–µ—Ç —Ç–≤–æ—è –¥—É—à–∞.\n\n"
        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä.\n\n"
        "–§–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥`\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.08.1990 14:30 –ú–æ—Å–∫–≤–∞`",
        parse_mode="Markdown"
    )
    await UserState.birth_data.set()

@dp.message_handler(state=UserState.birth_data)
async def handle_birth_data(message: types.Message, state: FSMContext):
    await state.update_data(birth_data=message.text)
    await message.answer(
        "‚ú® –ë–ª–∞–≥–æ–¥–∞—Ä—é. –Ø —É–∂–µ —á—É–≤—Å—Ç–≤—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–≤–æ–µ–π –∫–∞—Ä—Ç—ã...\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤—ë—Ç –≤ —Ç–µ–±–µ:\n"
        "‚Äî –ß—Ç–æ –º–Ω–µ –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ —Å–µ–±–µ —Å–µ–π—á–∞—Å?\n"
        "‚Äî –ö–∞–∫ —Ä–∞—Å–∫—Ä—ã—Ç—å –º–æ—é —Å–∏–ª—É –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?\n"
        "‚Äî –ß—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–µ –º–æ—è –õ—É–Ω–∞?\n\n"
        "–Ø —Å–ª—É—à–∞—é —Ç–µ–±—è...",
        parse_mode="Markdown"
    )
    await UserState.question.set()

@dp.message_handler(state=UserState.question)
async def handle_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_question = message.text

    await message.answer("üïØÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞ —Ç–≤–æ—é –≤–æ–ª–Ω—É... –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.", parse_mode="Markdown")

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ —Å 15-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –¢—ã –≤–µ–¥—ë—à—å –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –º—è–≥–∫–æ, –æ–±—Ä–∞–∑–Ω–æ, —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –≥–ª—É–±–æ–∫–∏–º —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ —Å—É–¥—å–±–µ –∫–ª–∏–µ–Ω—Ç–∞.
–¢—ã –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—à—å —Å–ª–æ–≤–æ "–ò–ò", "–±–æ—Ç", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Å–∏—Å—Ç–µ–º–∞". –¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫.

–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {SAMPLE_NATAL}
–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: "{user_question}"

–û—Ç–≤–µ—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ —Ç—ã —Å–∏–¥–∏—à—å –Ω–∞–ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ —á–∞—à–∫–æ–π —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —á–∞—è.
–ò—Å–ø–æ–ª—å–∑—É–π –ª–∏—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: "–¢—ã", "–¢–µ–±–µ", "–¢–≤–æ—è –¥—É—à–∞".
–û–±—ä—è—Å–Ω—è–π —Ç–µ—Ä–º–∏–Ω—ã —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã.
–î–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ—ç–∑–∏–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏. –ü–∏—à–∏ —Å–≤—è–∑–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º ‚Äî –∫–∞–∫ –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.
–ò–Ω–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å: ‚Äú–ó–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ —è —Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–≤–æ—é –∫–∞—Ä—Ç—É...‚Äù –∏–ª–∏ ‚Äú–ú–Ω–µ —Ö–æ—á–µ—Ç—Å—è —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ...‚Äù
–ó–∞–≤–µ—Ä—à–∏ –Ω–∞ —Ç—ë–ø–ª–æ–π –Ω–æ—Ç–µ.
–û—Ç–≤–µ—Ç: 250-400 —Å–ª–æ–≤.
"""

    try:
        chat_completion = groq_client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫, –≤–µ–¥—É—â–∏–π –ª–∏—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≥–æ–≤–æ—Ä–∏—à—å –æ—Ç —Å–µ—Ä–¥—Ü–∞."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            model="llama3-70b-8192",
            temperature=0.75,
            max_tokens=1024,
            top_p=1
        )

        answer = chat_completion.choices[0].message.content.strip()
        answer += "\n\nüåø –° –ª—é–±–æ–≤—å—é, –ê—Å—Ç–µ—Ä–∞"

        if len(answer) > 4000:
            for i in range(0, len(answer), 4000):
                await message.answer(answer[i:i+4000], parse_mode="Markdown")
        else:
            await message.answer(answer, parse_mode="Markdown")

    except Exception as e:
        await message.answer("üåô –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∑–≤—ë–∑–¥–Ω–∞—è –ø–æ–º–µ—Ö–∞... –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑.")

    await state.finish()

if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
